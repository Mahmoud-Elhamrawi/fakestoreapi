{
	"info": {
		"_postman_id": "9f580807-9fc3-4e08-96b4-4ae5800f5e98",
		"name": "fakeAPIStore",
		"description": "fakeStoreApi can be used with any type of shopping project that needs products, carts, and users.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14555402",
		"_collection_link": "https://www.postman.com/mahmoudelhamrawi/workspace/fake-rest-api-testing/collection/14555402-9f580807-9fc3-4e08-96b4-4ae5800f5e98?action=share&source=collection_link&creator=14555402"
	},
	"item": [
		{
			"name": "products",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//check status code \r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									" //response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(800);\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"//check on first value\r",
									"pm.test(\"check on first valuee\", function () {\r",
									"    for(let i = 5 ; i<jsonData.length;i++)\r",
									"    {\r",
									"        console.log(jsonData[i].id)\r",
									"    }\r",
									"    pm.expect(jsonData[0].id).to.eql(1);\r",
									"});\r",
									"//\r",
									"pm.environment.set(\"title#5\",jsonData[4].title);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code \r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									" //response time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									" var jsonData = pm.response.json();\r",
									"//check values\r",
									"pm.test(\"check on first valuee\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(5);\r",
									"     pm.expect(jsonData.title).to.eql(\"John Hardy Women's Legends Naga Gold & Silver Dragon Station Chain Bracelet\");\r",
									"     pm.expect(jsonData.price).to.eql(695);\r",
									"     pm.expect(jsonData.rating.rate).to.eql(4.6);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{prodID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{prodID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"\r",
									"pm.test('Response time is less than 200ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"check on values\", function () {\r",
									"    pm.expect(jsonData[0].id).to.equal(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?limit={{limit}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort and limit results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check on status code\r",
									"pm.test('Successful POST request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"//check on respose time\r",
									"pm.test('Response time is less than 200ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(jsonData[0].id).to.equal(3)\r",
									"    pm.expect(jsonData[1].id).to.equal(2)\r",
									"    pm.expect(jsonData[2].id).to.equal(1)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sort={{sort}}&limit={{limit}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sort",
									"value": "{{sort}}"
								},
								{
									"key": "limit",
									"value": "{{limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check on status code\r",
									"pm.test('Successful Get request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"//check on respose time\r",
									"pm.test('Response time is less than 200ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//checkon values \r",
									"let  categories = [\r",
									"    \"electronics\",\r",
									"    \"jewelery\",\r",
									"    \"men's clothing\",\r",
									"    \"women's clothing\"\r",
									"]\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    for(let i=0;i<jsonData.length;i++)\r",
									"    {\r",
									"        pm.test('check on values', function () {\r",
									"         pm.expect(jsonData[i]).to.be.equal(categories[i]);\r",
									"        })\r",
									"\r",
									"    }\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check on status code\r",
									"pm.test('Successful Get request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"//check on respose time\r",
									"pm.test('Response time is less than 200ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonDate = pm.response.json();\r",
									"pm.test(\"check on  id\", function () {\r",
									"    pm.expect(jsonDate.id).to.be.equal(21);\r",
									"});\r",
									"pm.test(\"check on  category\", function () {\r",
									"    pm.expect(jsonDate.category).to.be.equal(\"jewelery\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "      {\r\n                    \"title\": \"item test\",\r\n                    \"price\": 13.25,\r\n                    \"description\": \"lorem ipsum set0\",\r\n                    \"image\": \"https://i.pravatar.cc\",\r\n                    \"category\": \"jewelery\"\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check on status code\r",
									"pm.test('Successful Get request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"//check on respose time\r",
									"pm.test('Response time is less than 200ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonDate = pm.response.json();\r",
									"    var  prodID =parseInt(pm.environment.get(\"prodID\")) ;\r",
									"pm.test(\"check on values\", function () {\r",
									"    pm.expect(jsonDate.id).to.be.equal(prodID);\r",
									"     pm.expect(jsonDate.price).to.be.equal(1399);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "      {\r\n                    \"title\": \"item test\",\r\n                    \"price\": 1399,\r\n                    \"description\": \"lorem ipsum set0\",\r\n                    \"image\": \"https://i.pravatar.cc\",\r\n                    \"category\": \"jewelery\"\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{prodID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{prodID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check on status code\r",
									"pm.test('Successful Get request', function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([\r",
									"        200,\r",
									"        201,\r",
									"        202\r",
									"    ]);\r",
									"})\r",
									"//check on respose time\r",
									"pm.test('Response time is less than 200ms', function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"})\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonDate = pm.response.json();\r",
									"let titile = pm.environment.get(\"title#5\");\r",
									"pm.test(\"check on title\", function () {\r",
									"    pm.expect(jsonDate.title).to.include(titile);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{prodID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{prodID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "endpoints relatede with products feature"
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Get all carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"var ids =[1,2,3,4,5,6,7];\r",
									"\r",
									"    for(let i = 0;i<jsonData.length;i++)\r",
									"    {\r",
									"        pm.test(\"check id\", function () {\r",
									"     pm.expect(jsonData[i].id).to.eql(ids[i]);\r",
									"     });\r",
									"    }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"check on id\", function () {\r",
									"    pm.expect(jsonData.id).to.be.equal(5);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/{{cartID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								"{{cartID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"check ids\", function () {\r",
									"    pm.expect(jsonData[2].id).to.be.equal(3);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts?limit={{limit}}&sort={{sortAsec}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "sort",
									"value": "{{sortAsec}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user carts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"check  on userID\",function(){\r",
									"     pm.expect(jsonData[0].userId).to.be.equal(2);\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/user/2",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								"user",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"var userid = pm.environment.get(\"userID\");\r",
									"   \r",
									"pm.test(\"\",function(){\r",
									"    pm.expect(jsonData.userId).to.be.equal(userid)\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"pm.environment.set(\"userID\", 5);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n         \"userId\":{{userID}},\r\n        \"date\":\"20204-01-26\",\r\n        \"products\":[{\"productId\":5,\"quantity\":1},{\"productId\":1,\"quantity\":5}]\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"check on date updated\",function(){\r",
									"    pm.expect(jsonData.date).to.be.equal(\"2020-01-26\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n         \"userId\":{{userID}},\r\n        \"date\":\"2020-01-26\",\r\n        \"products\":[{\"productId\":5,\"quantity\":3},{\"productId\":1,\"quantity\":5}]\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"var cartID =parseInt(pm.environment.get(\"cartID\"));\r",
									"pm.test(\"check on id deleted\",function(){\r",
									"    pm.expect(jsonData.id).to.be.equal(cartID)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/{{cartID}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								"{{cartID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "endpoints relatred with cart features"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "User login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"//chec on values\r",
									"var jsonData = pm.response.json();\r",
									"pm.environment.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n      \"username\": \"mor_2314\",\r\n      \"password\": \"83r5^_\"\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"//check on values\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"check on last id \",function(){\r",
									"     pm.expect(jsonData[0].id).to.be.equal(1)\r",
									"    pm.expect(jsonData[9].id).to.be.equal(10)\r",
									"});\r",
									"\r",
									"\r",
									"pm.environment.set(\"emialUserID#9\",jsonData[0].email );\r",
									"pm.environment.set(\"IDUserID#9\",jsonData[0].id );\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"var myId = pm.environment.get(\"IDUserID#9\");\r",
									"var myEmail = pm.environment.get(\"emialUserID#9\"); \r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"chek on emai\",function(){\r",
									"        pm.expect(jsonData.id).to.be.equal(myId);\r",
									"        pm.expect(jsonData.email).to.be.equal(myEmail);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{IDUserID#9}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{IDUserID#9}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit  and sort results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"//check on values\r",
									"   var ids = [1,2,3];\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    for(let i = 0 ;i<jsonData.length;i++)\r",
									"    {\r",
									"      pm.test(\"check on values\", function () {\r",
									"          pm.expect(jsonData[i].id).to.eql(ids[i]);\r",
									"        });\r",
									"    }\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users?limit={{limit}}&sort={{sortASEC}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}"
								},
								{
									"key": "sort",
									"value": "{{sortASEC}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"\r",
									"//check content headers\r",
									"pm.test(\"Response content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n                    \"email\":\"mahmoudelhamrawi5@gmail.com\",\r\n                    \"username\":\"mahmoud\",\r\n                    \"password\":\"123456\",\r\n                    \"name\":{\r\n                        \"firstname\":\"mahmoud\",\r\n                        \"lastname\":\"rashad\"\r\n                    },\r\n                    \"address\":{\r\n                        \"city\":\"alexandria\",\r\n                        \"street\":\"streen number 4\",\r\n                        \"number\":3,\r\n                        \"zipcode\":\"12926-3874\",\r\n                        \"geolocation\":{\r\n                            \"lat\":\"-37.3159\",\r\n                            \"long\":\"81.1496\"\r\n                        }\r\n                    },\r\n                    \"phone\":\"1-570-236-7033\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"//chec on values\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"chec n values\",function(){\r",
									"  pm.expect(jsonData.email).to .be.equal(\"mahmoudelhamrawi5@gmail.com\")\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n                    \"email\":\"mahmoudelhamrawi5@gmail.com\",\r\n                    \"username\":\"mahmoud\",\r\n                    \"password\":\"123456\",\r\n                    \"name\":{\r\n                        \"firstname\":\"mahmoud\",\r\n                        \"lastname\":\"rashad\"\r\n                    },\r\n                    \"address\":{\r\n                        \"city\":\"alexandria\",\r\n                        \"street\":\"streen number 4\",\r\n                        \"number\":3,\r\n                        \"zipcode\":\"12926-3874\",\r\n                        \"geolocation\":{\r\n                            \"lat\":\"-37.3159\",\r\n                            \"long\":\"81.1496\"\r\n                        }\r\n                    },\r\n                    \"phone\":\"1-570-236-7033\"\r\n   }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/11",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"11"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check ststus code \r",
									"pm.test(\"Successful ststus code\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201, 202]);\r",
									"});\r",
									"\r",
									"//check respose time\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
									"});\r",
									"//chec on values\r",
									"var jsonData = pm.response.json();\r",
									"var userID =parseInt(pm.environment.get(\"userDelete\"));\r",
									"\r",
									"pm.test(\"check on id \",function(){\r",
									" pm.expect(jsonData.id).to.be.equal(userID)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userDelete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userDelete}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "endpoints relatede with usre feature"
		}
	]
}